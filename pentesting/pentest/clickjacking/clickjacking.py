import requests


# Функция для проверки на clickjacking
def check_clickjacking(url):
    # Создаем HTML-код, который будет пытаться вызвать сайт во фрейме с другого домена
    html_code = '''
        <html>
            <head>
                <title>Clickjacking Test</title>
            </head>
            <body>
                <h1>Clickjacking Test</h1>
                <iframe src="''' + url + '''" width="500" height="500"></iframe>
            </body>
        </html>
    '''

    # Отправляем POST запрос на https://www.hacker101.com/ с заголовком, который позволяет встраивать его во фрейм
    response = requests.post(url, data=html_code, headers={'X-Frame-Options': url})
    pentest = ""
    header_value = ""
    CSP = ""

    # Если в ответе отображается содержимое сайта, то clickjacking не удался

    if "Clickjacking Test" in response.text:
        print("Сайт уязвим к clickjacking")
        pentest = "Сайт уязвим к clickjacking"
    else:
        print("Сайт защищен от clickjacking")
        pentest = "Сайт защищен от clickjacking"

    # Отправляем запрос HEAD на сайт и получаем заголовки
    response = requests.head(url)
    x_frame_options = response.headers.get("X-Frame-Options")
    content_security_policy = response.headers.get("Content-Security-Policy")

    # Проверяем наличие заголовка X-Frame-Options
    if x_frame_options:
        if x_frame_options == "DENY":
            print("Защищен с помощью заголовка X-Frame-Options: DENY")
            header_value = "Защищен с помощью заголовка X-Frame-Options: DENY"
        elif x_frame_options == "SAMEORIGIN":
            print("Защищен с помощью заголовка X-Frame-Options: SAMEORIGIN")
            header_value = "Защищен с помощью заголовка X-Frame-Options: SAMEORIGIN"
        elif "ALLOW-FROM" in x_frame_options:
            print("Защищен с помощью заголовка X-Frame-Options: ALLOW-FROM")
            print("Значение заголовка: ", x_frame_options)
            header_value = "Защищен с помощью заголовка X-Frame-Options: ALLOW-FROM"
        else:
            print("Неизвестное значение заголовка X-Frame-Options: ", x_frame_options)
            header_value = "Неизвестное значение заголовка X-Frame-Options: ", x_frame_options
    else:
        print("Заголовок X-Frame-Options отсутствует")
        header_value = "Заголовок X-Frame-Options отсутствует"

        # Проверяем наличие заголовка Content-Security-Policy
    if content_security_policy:
        if "frame-ancestors 'none'" in content_security_policy:
            print("Защищен с помощью заголовка Content-Security-Policy: frame-ancestors 'none'")
            CSP = "Защищен с помощью заголовка Content-Security-Policy: frame-ancestors 'none'"
        else:
            print("Заголовок Content-Security-Policy не обнаружен или не содержит защиты от clickjacking")
            CSP = "Заголовок Content-Security-Policy не обнаружен или не содержит защиты от clickjacking"
    else:
        print("Заголовок Content-Security-Policy отсутствует")
        CSP = "Заголовок Content-Security-Policy отсутствует"
    return {
        "pentest": pentest,
        "header_value": header_value,
        "CSP": CSP
    }
